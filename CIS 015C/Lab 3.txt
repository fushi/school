//
//  lab-3.a.cpp
//  CIS 015C
//
//  Created by John Towler on 4/26/11.
//  Copyright 2011. All rights reserved.
//

#include <time.h>
#include <stdlib.h>
#include <iostream.h>

#define MAT_SIZE 400

typedef float* DynMat[MAT_SIZE];

void MatShow_Dyn(const DynMat & mat, int start, int size);
void MatMult_Dyn(const DynMat & mat_a, const DynMat & mat_b,
    const DynMat & mat_ans, int size);

int main(){
    int r, c;
    clock_t start_time, end_time;
    double rand_frac;
    int rand_row, rand_col, small_percent;

    // non-sparse dynamic matrix
    DynMat mat_dyn, mat_dyn_ans;

    // allocate rows and initialize to 0
    for (r = 0; r < MAT_SIZE; r++)
    {
        mat_dyn[r] = new float[MAT_SIZE];
        mat_dyn_ans[r] = new float[MAT_SIZE];

        for (c = 0; c < MAT_SIZE; c++){
            mat_dyn[r][c] = 0;
            mat_dyn_ans[r][c] = 0;
        }
    }

    srand(time(NULL));

    // generated 0.2% non-default values bet 0 and 1
    small_percent = MAT_SIZE * MAT_SIZE * .05;
    for (r = 0; r < small_percent; r++){
        rand_row = rand() % MAT_SIZE;
        rand_col = rand() % MAT_SIZE;
        rand_frac = (rand() % 100) / (double) 99;
        mat_dyn[rand_row][rand_col] = rand_frac;
    }

    // 15x15 submatrix anchored at (60, 60)
    MatShow_Dyn(mat_dyn, 60, 15);

    start_time = clock();  // ------------------ start
    MatMult_Dyn(mat_dyn, mat_dyn, mat_dyn_ans, MAT_SIZE);
    end_time = clock();  // ---------------------- stop
    cout << "\nDyn Array Mult Elapsed Time: " 
    << (double)(end_time - start_time)/(double)CLOCKS_PER_SEC 
    << " seconds." << endl << endl;

    // show product
    MatShow_Dyn(mat_dyn_ans, 60, 15);

    // clean up
    for (r = 0; r < MAT_SIZE; r++){
        delete[] mat_dyn_ans[r]; 
        delete[] mat_dyn[r];
    }    

    cout << endl;
}

void MatShow_Dyn(const DynMat & mat, int start, int size){
    int r, c;

    for (r = start; r < start + size; r++){        
        for (c = start; c < start + size; c++){
            printf("%1.2f  ", mat[r][c]);
        }
        printf("\n");
    }
}

void MatMult_Dyn(const DynMat & mat_a, const DynMat & mat_b,
    const DynMat & mat_ans, int size){

    float sum;

    for(int i = 0; i < MAT_SIZE; i++){
        for (int j= 0; j < MAT_SIZE; j++){
            for (int k = 0; k < MAT_SIZE; k++) {
                sum += mat_a[i][k] * mat_b[k][j];
            }
        mat_ans[i][j] = sum;
        sum = 0;
        }
    }
}


//
//Results:
//
GNU gdb 6.3.50-20050815 (Apple version gdb-1518) (Sat Feb 12 02:52:12 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin".tty /dev/ttys003
[Switching to process 35139 thread 0x0]
0.95  0.00  
0.88  0.86  

Dyn Array Mult Elapsed Time: 1e-06 seconds.

0.90  0.00  
1.59  0.74  

Program ended with exit code: 0


GNU gdb 6.3.50-20050815 (Apple version gdb-1518) (Sat Feb 12 02:52:12 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin".tty /dev/ttys003
[Switching to process 34998 thread 0x0]
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.35  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.30  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.87  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.21  0.00  0.00  0.00  0.16  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  1.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.56  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  

Dyn Array Mult Elapsed Time: 0.604415 seconds.

0.00  0.80  0.00  0.32  0.48  0.03  0.07  1.13  0.19  0.00  0.00  1.07  0.95  0.81  0.00  
0.00  0.00  0.00  0.05  0.00  1.05  0.06  0.46  0.40  0.10  0.35  0.00  0.02  0.03  0.09  
0.15  0.00  0.67  0.00  0.00  0.61  0.00  0.15  1.04  0.00  0.70  0.32  0.60  0.00  0.00  
0.50  0.00  0.14  0.47  0.31  0.00  0.78  0.00  0.99  0.00  0.21  0.01  0.00  0.22  0.71  
0.11  0.50  0.00  0.28  0.00  0.00  0.25  0.98  0.00  0.00  0.00  0.95  0.41  0.00  0.00  
0.00  0.00  0.00  0.00  0.00  0.75  0.00  0.02  0.39  0.00  0.05  0.13  0.11  0.00  0.00  
0.28  0.00  0.00  0.59  0.33  0.00  0.09  0.00  0.00  0.50  2.02  0.00  0.52  0.89  0.00  
0.08  0.00  0.00  0.36  0.19  0.00  0.00  0.08  0.37  1.04  0.59  0.00  0.00  0.16  1.12  
0.26  0.00  0.00  0.34  0.02  0.24  0.35  0.17  0.00  0.18  0.00  0.00  0.24  0.29  0.24  
0.00  0.17  0.40  0.00  1.17  0.00  0.00  1.38  0.00  0.00  0.15  1.37  0.19  0.96  0.00  
0.29  0.37  0.00  0.11  0.00  0.61  0.08  0.49  0.15  0.20  0.20  0.59  0.88  0.11  0.19  
0.57  0.61  0.00  0.20  0.10  0.51  0.03  0.02  0.04  0.44  0.61  1.01  0.87  0.53  0.00  
0.00  0.00  0.00  0.66  0.00  0.15  0.43  0.66  0.01  0.00  0.20  0.00  0.00  0.09  0.00  
0.29  0.14  0.15  0.25  0.00  1.29  0.00  0.00  0.92  0.15  0.00  0.00  0.30  0.00  0.47  
0.00  0.00  0.38  0.45  0.00  0.00  0.00  0.00  0.21  0.00  0.42  0.00  0.74  0.48  0.00  

Program ended with exit code: 0

//
//Answers:
//

Matrix multiplication is O(N^3) and theta(N^3), because it should have 3 nested loops.

The smallest M that gave a nonzero (actually, a non scientific notation number) was 26.

Testing from 50, and going to 800, the times were as follows:




I could allocate 2 matrices with a side of 10000, but I did not wait to see how long it took.

The data showed times that were slightly less than N^3, but much greater than N^2. I believe this supports my thoughts that Matrix multiplication is N^3.